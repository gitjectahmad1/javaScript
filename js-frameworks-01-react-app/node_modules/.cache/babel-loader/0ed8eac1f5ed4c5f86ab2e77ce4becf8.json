{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AhmadSumon\\\\Downloads\\\\js-frameworks-01-react-app\\\\src\\\\Pages\\\\SharePlace.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport SelectedPlace from '../UI/SelectedPlace';\nimport Modal from '../UI/Modal';\nimport Header from '../UI/Header';\nimport { getCoordsFromAddress, getAddressFromCoords } from '../Utility/Location';\nimport './SharePlace.css';\n\nconst SharePlace = () => {\n  const [chosenCoords, setChosenCoords] = useState();\n  const [chosenAddress, setChosenAddress] = useState();\n  const [sharableLink, setSharableLink] = useState('');\n  const [isLoading, setIsLoading] = useState();\n  const addressInputRef = useRef();\n  const shareLinkRef = useRef();\n  useEffect(() => {\n    if (chosenAddress && chosenCoords) {\n      setSharableLink(`${window.location.origin}/my-place?address=${encodeURI(chosenAddress)}&lat=${chosenCoords.lat}&lng=${chosenCoords.lng}`);\n    }\n  }, [chosenAddress, chosenCoords]);\n\n  const pickAddressHandler = async event => {\n    event.preventDefault();\n    const address = addressInputRef.current.value;\n\n    if (!address || address.trim().length === 0) {\n      alert('Invalid address entered - please try again!');\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const coordinates = await getCoordsFromAddress(address);\n      setChosenCoords(coordinates);\n      setChosenAddress(address);\n    } catch (err) {\n      alert(err.message);\n    }\n\n    setIsLoading(false);\n  };\n\n  const getUserLocationHandler = async () => {\n    if (!navigator.geolocation) {\n      alert('Location feature is not available in your browser - please use a more modern browser or manually enter an address.');\n      return;\n    }\n\n    setIsLoading(true);\n    navigator.geolocation.getCurrentPosition(async successResult => {\n      const coordinates = {\n        lat: successResult.coords.latitude + Math.random() * 50,\n        lng: successResult.coords.longitude + Math.random() * 50\n      };\n      const address = await getAddressFromCoords(coordinates);\n      setChosenCoords(coordinates);\n      setChosenAddress(address);\n      setIsLoading(false);\n    }, error => {\n      setIsLoading(false);\n      alert('Could not locate you unfortunately. Please enter an address manually!');\n    });\n  };\n\n  const sharePlaceHandler = () => {\n    if (!navigator.clipboard) {\n      shareLinkRef.current.select();\n      return;\n    }\n\n    navigator.clipboard.writeText(sharableLink).then(() => {\n      alert('Copied into clipboard!');\n    }).catch(err => {\n      console.log(err);\n      shareLinkRef.current.select();\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(Modal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal__content centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lds-dual-ring\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Header, {\n    title: \"Share a Place\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SelectedPlace, {\n    fallbackText: \"You haven't selected any place yet. Please enter an address or locate yourself!\",\n    centerCoords: chosenCoords,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    id: \"share-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: shareLinkRef,\n    value: sharableLink,\n    type: \"text\",\n    readOnly: true,\n    placeholder: \"Select a place to get a sharable link.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !sharableLink,\n    onClick: sharePlaceHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"Share Place\")), /*#__PURE__*/React.createElement(\"section\", {\n    id: \"place-data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: pickAddressHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, \"Address\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"address\",\n    ref: addressInputRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, \"Find Place\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: getUserLocationHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, \"Get Current Location\")));\n};\n\nexport default SharePlace;","map":{"version":3,"sources":["C:/Users/AhmadSumon/Downloads/js-frameworks-01-react-app/src/Pages/SharePlace.js"],"names":["React","useState","useRef","useEffect","SelectedPlace","Modal","Header","getCoordsFromAddress","getAddressFromCoords","SharePlace","chosenCoords","setChosenCoords","chosenAddress","setChosenAddress","sharableLink","setSharableLink","isLoading","setIsLoading","addressInputRef","shareLinkRef","window","location","origin","encodeURI","lat","lng","pickAddressHandler","event","preventDefault","address","current","value","trim","length","alert","coordinates","err","message","getUserLocationHandler","navigator","geolocation","getCurrentPosition","successResult","coords","latitude","Math","random","longitude","error","sharePlaceHandler","clipboard","select","writeText","then","catch","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nimport SelectedPlace from '../UI/SelectedPlace';\nimport Modal from '../UI/Modal';\nimport Header from '../UI/Header';\nimport {\n  getCoordsFromAddress,\n  getAddressFromCoords\n} from '../Utility/Location';\nimport './SharePlace.css';\n\nconst SharePlace = () => {\n  const [chosenCoords, setChosenCoords] = useState();\n  const [chosenAddress, setChosenAddress] = useState();\n  const [sharableLink, setSharableLink] = useState('');\n  const [isLoading, setIsLoading] = useState();\n  const addressInputRef = useRef();\n  const shareLinkRef = useRef();\n\n  useEffect(() => {\n    if (chosenAddress && chosenCoords) {\n      setSharableLink(\n        `${window.location.origin}/my-place?address=${encodeURI(\n          chosenAddress\n        )}&lat=${chosenCoords.lat}&lng=${chosenCoords.lng}`\n      );\n    }\n  }, [chosenAddress, chosenCoords]);\n\n  const pickAddressHandler = async event => {\n    event.preventDefault();\n    const address = addressInputRef.current.value;\n    if (!address || address.trim().length === 0) {\n      alert('Invalid address entered - please try again!');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const coordinates = await getCoordsFromAddress(address);\n      setChosenCoords(coordinates);\n      setChosenAddress(address);\n    } catch (err) {\n      alert(err.message);\n    }\n    setIsLoading(false);\n  };\n\n  const getUserLocationHandler = async () => {\n    if (!navigator.geolocation) {\n      alert(\n        'Location feature is not available in your browser - please use a more modern browser or manually enter an address.'\n      );\n      return;\n    }\n    setIsLoading(true);\n    navigator.geolocation.getCurrentPosition(\n      async successResult => {\n        const coordinates = {\n          lat: successResult.coords.latitude + Math.random() * 50,\n          lng: successResult.coords.longitude + Math.random() * 50\n        };\n        const address = await getAddressFromCoords(coordinates);\n        setChosenCoords(coordinates);\n        setChosenAddress(address);\n        setIsLoading(false);\n      },\n      error => {\n        setIsLoading(false);\n        alert(\n          'Could not locate you unfortunately. Please enter an address manually!'\n        );\n      }\n    );\n  };\n\n  const sharePlaceHandler = () => {\n    if (!navigator.clipboard) {\n      shareLinkRef.current.select();\n      return;\n    }\n\n    navigator.clipboard\n      .writeText(sharableLink)\n      .then(() => {\n        alert('Copied into clipboard!');\n      })\n      .catch(err => {\n        console.log(err);\n        shareLinkRef.current.select();\n      });\n  };\n\n  return (\n    <React.Fragment>\n      {isLoading && (\n        <Modal>\n          <div className=\"modal__content centered\">\n            <div className=\"lds-dual-ring\"></div>\n          </div>\n        </Modal>\n      )}\n\n      <Header title=\"Share a Place\" />\n\n      <SelectedPlace\n        fallbackText=\"You haven't selected any place yet. Please enter an address or\n            locate yourself!\"\n        centerCoords={chosenCoords}\n      />\n\n      <section id=\"share-controls\">\n        <input\n          ref={shareLinkRef}\n          value={sharableLink}\n          type=\"text\"\n          readOnly\n          placeholder=\"Select a place to get a sharable link.\"\n        />\n        <button disabled={!sharableLink} onClick={sharePlaceHandler}>\n          Share Place\n        </button>\n      </section>\n\n      <section id=\"place-data\">\n        <form onSubmit={pickAddressHandler}>\n          <label htmlFor=\"address\">Address</label>\n          <input type=\"text\" id=\"address\" ref={addressInputRef} />\n          <button type=\"submit\">Find Place</button>\n        </form>\n        <button onClick={getUserLocationHandler}>Get Current Location</button>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default SharePlace;\n"]},"metadata":{},"sourceType":"module"}